---

# WARNING. Before changing the order of the tasks here, make sure you consider the implications. There are many task
# orders that won't work and this isn't one of them because of an hour of testing.

- name: Add nodesource apt_keys
  apt_key:
    url: "https://deb.nodesource.com/gpgkey/nodesource.gpg.key"
    state: present

- apt_repository:
    repo: "deb https://deb.nodesource.com/node_{{ nodejs_major_version }}.x {{ ansible_distribution_release }} main"
    state: present

- name: Install node-red dependencies
  action: apt pkg="{{ nodered_dependencies + [ 'nodejs' ] }}" state=latest update_cache=yes

- name: Create non-priviledged user to run node-red
  user: >
    name=node-red
    append=yes
    groups=users

# npm normally installs its packages into your current directory. The -g flag is used to install packages 'globally' 
# so they're placed in standard system locations such as /usr/local/bin. The --unsafe-perm flag helps us avoid some
# errors that can pop up when npm tries to compile native modules (modules written in a compiled language such as C
# or C++ vs. JavaScript).

- name: "Install Node-RED node.js package globally. Takes a few minutes."
  command: npm install -g --unsafe-perm node-red node-red-admin

# TODO: replace the above line, needs ansible 2.8
# - name: Install "node-red" node.js package. Takes a few minutes!
#   npm:
#     name: node-red
#     unsafe_perm: true
#     global: yes
#     state: latest

- name: "Install Node-RED packages (flows, nodes)"
  npm:
    name: "{{ item }}"
    state: latest
    global: yes
  with_items: "{{ nodered_global_packages }}"

- name: "Get password hashes for admin users"
  shell: echo "{{ item.pass }}" | node-red-admin hash-pw | sed -n 1p | sed 's/[^ ]* //'
  register: admins
  with_items: "{{ nodered_admin_users }}"
  tags: [ 'configuration' ]

- name: "Get password hash for node user"
  shell: echo "{{ nodered_nodeauth_pass }}" | node-red-admin hash-pw | sed -n 1p | sed 's/[^ ]* //'
  register: nodeauth
  tags: [ 'configuration' ]

- debug: var=nodeauth
  tags: [ 'configuration' ]

- name: Setup a systemd service for node-red
  template: src=nodered.service.j2 dest=/lib/systemd/system/node-red.service
  tags: [ 'configuration' ]

- name: Enable and start the node-red systemd service
  systemd: name=node-red enabled=yes state=started
  tags: [ 'configuration' ]

- name: "Install Node-RED packages (flows, nodes) requiring local installation"
  npm:
    name: "{{ item }}"
    state: latest
    global: no
    path: /home/node-red/.node-red
  with_items: "{{ nodered_local_packages }}"

- name: Configure settings.js
  blockinfile:
    path: /home/node-red/.node-red/settings.js
    insertbefore: '.*To password protect the node-defined HTTP endpoints.*'
    marker: "    // {mark} ANSIBLE MANAGED BLOCK - credentials"
    block: |2
          adminAuth: {
              type: "credentials",
              users: [
              {%- for loopitem in admins.results %}{
                  username: "{{ loopitem.item.user }}",
                  password: "{{ loopitem.stdout }}",
                  permissions: "{{ loopitem.item.perm | default(nodered_default_adminperm) }}"
              }
              {%- if not loop.last %},{% endif %}
              {% endfor %}
          ]
          },

          {% if nodered_nodeauth_user | length and nodered_nodeauth_pass | length %}httpNodeAuth: {user:"{{ nodered_nodeauth_user }}",pass:"{{ nodeauth.stdout }}"},{% endif %}
  tags: [ 'configuration' ]

- name: Configure bind host
  blockinfile:
    path: /home/node-red/.node-red/settings.js
    insertafter: '    //uiHost: "127.0.0.1",'
    marker: "    // {mark} ANSIBLE MANAGED BLOCK - bind ip"
    block: |2
          {% if nodered_ip and nodered_ip | length > 0 %}uiHost: "{{ nodered_ip }}",{% endif %}
  tags: [ 'configuration' ]

- name: Restart node-RED
  systemd: name=node-red state=restarted daemon_reload=yes
  tags: [ 'configuration' ]
